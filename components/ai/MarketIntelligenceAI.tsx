'use client';

import React, { useState } from 'react';
import { SuperEnhancedMarketIntelligence } from '@/lib/ai/super-enhanced-openai';
import { hasAIFeatureAccess } from '@/lib/subscription';
import { PlanType } from '@/lib/types';
import { useAuth } from '@/contexts/AuthContext';
import SubscriptionUpgrade from '@/components/SubscriptionUpgrade';
import { usePersistedAIAnalysis } from '@/lib/hooks/usePersistedAIAnalysis';
import ConversationalChatbox from './ConversationalChatbox';
import * as XLSX from 'xlsx';

interface MarketIntelligenceAIProps {
  industry?: string;
  geography?: string;
  dealSize?: number;
  listingId?: string;
}

export default function MarketIntelligenceAI({ industry, geography, dealSize, listingId }: MarketIntelligenceAIProps) {
  const { user, isLoading: authLoading } = useAuth();
  const [copySuccess, setCopySuccess] = useState<string | null>(null);

  const [formData, setFormData] = useState({
    industry: industry || '',
    geography: geography || '',
    dealSize: dealSize || 0
  });

  // Use the enhanced hook - it handles everything internally
  const {
    analysis: intelligence,
    isLoading,
    error,
    startAnalysis,
    clearAnalysis,
  } = usePersistedAIAnalysis<SuperEnhancedMarketIntelligence>(
    listingId || 'market-intelligence-general',
    'market_intelligence'
  );

  // Check if user has access to market intelligence feature
  const userPlan = (user?.plan as PlanType) || 'free';
  const hasAccess = hasAIFeatureAccess(userPlan, 'marketIntelligence', user?.role);

  const handleGenerateIntelligence = async () => {
    if (!formData.industry.trim()) {
      return;
    }

    // Start analysis with parameters
    await startAnalysis(true, {
      industry: formData.industry,
      geography: formData.geography || undefined,
      dealSize: formData.dealSize || undefined
    });
  };

  const formatCurrency = (amount: number) => {
    if (amount >= 1000000) {
      return `$${(amount / 1000000).toFixed(1)}M`;
    } else if (amount >= 1000) {
      return `$${(amount / 1000).toFixed(0)}K`;
    }
    return `$${amount.toLocaleString()}`;
  };

  const copyToClipboard = async () => {
    if (!intelligence) return;
    try {
      const formattedText = `
═══════════════════════════════════════════════════════
MARKET INTELLIGENCE REPORT
Industry: ${formData.industry}
${formData.geography ? `Geography: ${formData.geography}` : ''}
${formData.dealSize ? `Deal Size: ${formatCurrency(formData.dealSize)}` : ''}
Generated: ${new Date().toLocaleString()}
═══════════════════════════════════════════════════════

───────────────────────────────────────────────────────
MARKET CONDITIONS
───────────────────────────────────────────────────────
${intelligence.marketOverview?.size?.insight || 'Market overview unavailable'}

───────────────────────────────────────────────────────
VALUATION TRENDS
───────────────────────────────────────────────────────
${intelligence.marketOverview?.growth?.insight || 'Valuation trends unavailable'}

───────────────────────────────────────────────────────
COMPETITIVE LANDSCAPE
───────────────────────────────────────────────────────
${intelligence.competitive?.intensity?.insight || 'Competitive analysis unavailable'}

───────────────────────────────────────────────────────
MARKET TIMING INSIGHTS
───────────────────────────────────────────────────────
${intelligence.economic?.timing?.insight || 'Timing insights unavailable'}
Overall Timing Rating: ${intelligence.timing || 'N/A'}

───────────────────────────────────────────────────────
MARKET OPPORTUNITIES
───────────────────────────────────────────────────────
${(intelligence.competitive?.opportunities || []).map((op: any, i: number) =>
  `${i + 1}. ${typeof op === 'string' ? op : op?.insight || 'Opportunity'}`
).join('\n')}

───────────────────────────────────────────────────────
MARKET RISKS
───────────────────────────────────────────────────────
${(intelligence.economic?.risks || []).map((risk: any, i: number) =>
  `${i + 1}. ${typeof risk === 'string' ? risk : risk?.factor || 'Risk'}`
).join('\n')}

═══════════════════════════════════════════════════════
Generated by Succedence AI
https://succedence.com
═══════════════════════════════════════════════════════
      `.trim();

      await navigator.clipboard.writeText(formattedText);
      setCopySuccess('report');
      setTimeout(() => setCopySuccess(null), 2000);
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  };

  const exportToExcel = () => {
    if (!intelligence) return;

    const wb = XLSX.utils.book_new();

    // Summary Sheet
    const summaryData = [
      ['MARKET INTELLIGENCE REPORT'],
      [''],
      ['Industry', formData.industry],
      ...(formData.geography ? [['Geography', formData.geography]] : []),
      ...(formData.dealSize ? [['Deal Size', formatCurrency(formData.dealSize)]] : []),
      ['Generated', new Date().toLocaleString()],
      [''],
      ['OVERALL TIMING'],
      ['Market Timing Rating', intelligence.timing || 'N/A'],
    ];
    const wsSummary = XLSX.utils.aoa_to_sheet(summaryData);
    wsSummary['!cols'] = [{ wch: 20 }, { wch: 60 }];
    XLSX.utils.book_append_sheet(wb, wsSummary, 'Summary');

    // Market Overview Sheet
    const overviewData = [
      ['Category', 'Insight'],
      ['Market Size', intelligence.marketOverview?.size?.insight || ''],
      ['Growth Trends', intelligence.marketOverview?.growth?.insight || ''],
    ];
    const wsOverview = XLSX.utils.aoa_to_sheet(overviewData);
    wsOverview['!cols'] = [{ wch: 25 }, { wch: 80 }];
    XLSX.utils.book_append_sheet(wb, wsOverview, 'Market Overview');

    // Competitive Analysis Sheet
    const competitiveData = [
      ['Analysis Type', 'Details'],
      ['Competitive Intensity', intelligence.competitive?.intensity?.insight || ''],
      [''],
      ['Opportunities', ''],
      ...(intelligence.competitive?.opportunities || []).map((op: any) =>
        ['', typeof op === 'string' ? op : op?.insight || '']
      ),
    ];
    const wsCompetitive = XLSX.utils.aoa_to_sheet(competitiveData);
    wsCompetitive['!cols'] = [{ wch: 25 }, { wch: 80 }];
    XLSX.utils.book_append_sheet(wb, wsCompetitive, 'Competitive Analysis');

    // Market Timing Sheet
    const timingData = [
      ['Timing Factor', 'Insight'],
      ['Overall Rating', intelligence.timing || ''],
      ['Economic Timing', intelligence.economic?.timing?.insight || ''],
    ];
    const wsTiming = XLSX.utils.aoa_to_sheet(timingData);
    wsTiming['!cols'] = [{ wch: 25 }, { wch: 80 }];
    XLSX.utils.book_append_sheet(wb, wsTiming, 'Market Timing');

    // Risks Sheet
    const risksData = [
      ['#', 'Risk Factor'],
      ...(intelligence.economic?.risks || []).map((risk: any, i: number) => [
        i + 1,
        typeof risk === 'string' ? risk : risk?.factor || ''
      ])
    ];
    const wsRisks = XLSX.utils.aoa_to_sheet(risksData);
    wsRisks['!cols'] = [{ wch: 5 }, { wch: 80 }];
    XLSX.utils.book_append_sheet(wb, wsRisks, 'Market Risks');

    const timestamp = Date.now();
    XLSX.writeFile(wb, `market-intelligence-${formData.industry.replace(/[^a-z0-9]/gi, '-').toLowerCase()}-${timestamp}.xlsx`);
  };

  const printReport = () => {
    if (!intelligence) return;

    const printContent = `
      <!DOCTYPE html>
      <html>
        <head>
          <title>Market Intelligence Report - ${formData.industry}</title>
          <style>
            @media print {
              @page { margin: 1.5cm; }
              body { margin: 0; }
            }
            body {
              font-family: 'Georgia', serif;
              line-height: 1.6;
              color: #333;
              max-width: 800px;
              margin: 0 auto;
              padding: 20px;
            }
            h1 {
              color: #1a1a1a;
              border-bottom: 3px solid #d4af37;
              padding-bottom: 10px;
              margin-bottom: 20px;
            }
            h2 {
              color: #2a2a2a;
              border-bottom: 2px solid #e0e0e0;
              padding-bottom: 5px;
              margin-top: 30px;
              margin-bottom: 15px;
            }
            .header {
              text-align: center;
              margin-bottom: 30px;
              padding-bottom: 20px;
              border-bottom: 3px solid #d4af37;
            }
            .parameters {
              background: #f5f5f5;
              border: 2px solid #d4af37;
              border-radius: 8px;
              padding: 20px;
              margin: 20px 0;
            }
            .section {
              margin: 25px 0;
              padding: 15px;
              background: #fafafa;
              border-radius: 8px;
              page-break-inside: avoid;
            }
            .timing-box {
              background: #e3f2fd;
              border-left: 4px solid #2196f3;
              padding: 15px;
              margin: 20px 0;
            }
            ul {
              list-style: none;
              padding-left: 0;
            }
            li {
              padding: 5px 0;
            }
            li:before {
              content: "• ";
              color: #d4af37;
              font-weight: bold;
              margin-right: 5px;
            }
            .footer {
              margin-top: 40px;
              padding-top: 20px;
              border-top: 2px solid #e0e0e0;
              text-align: center;
              color: #666;
              font-size: 0.9em;
            }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>Market Intelligence Report</h1>
            <p>Generated: ${new Date().toLocaleString()}</p>
          </div>

          <div class="parameters">
            <h3>Analysis Parameters</h3>
            <p><strong>Industry:</strong> ${formData.industry}</p>
            ${formData.geography ? `<p><strong>Geography:</strong> ${formData.geography}</p>` : ''}
            ${formData.dealSize ? `<p><strong>Deal Size:</strong> ${formatCurrency(formData.dealSize)}</p>` : ''}
          </div>

          <h2>Current Market Conditions</h2>
          <div class="section">
            <p>${intelligence.marketOverview?.size?.insight || 'Market overview unavailable'}</p>
          </div>

          <h2>Valuation Trends</h2>
          <div class="section">
            <p>${intelligence.marketOverview?.growth?.insight || 'Valuation trends unavailable'}</p>
          </div>

          <h2>Competitive Landscape</h2>
          <div class="section">
            <p>${intelligence.competitive?.intensity?.insight || 'Competitive analysis unavailable'}</p>
          </div>

          <h2>Market Timing Insights</h2>
          <div class="timing-box">
            <p>${intelligence.economic?.timing?.insight || 'Timing insights unavailable'}</p>
            <p><strong>Overall Timing Rating:</strong> ${intelligence.timing || 'N/A'}</p>
          </div>

          <h2>Market Opportunities</h2>
          <div class="section">
            <ul>
              ${(intelligence.competitive?.opportunities || []).map((op: any) =>
                `<li>${typeof op === 'string' ? op : op?.insight || 'Opportunity unavailable'}</li>`
              ).join('')}
            </ul>
          </div>

          <h2>Market Risks</h2>
          <div class="section">
            <ul>
              ${(intelligence.economic?.risks || []).map((risk: any) =>
                `<li>${typeof risk === 'string' ? risk : risk?.factor || 'Risk unavailable'}</li>`
              ).join('')}
            </ul>
          </div>

          <div class="footer">
            <p><strong>Generated by Succedence AI Platform</strong></p>
            <p>https://succedence.com</p>
            <p>Printed: ${new Date().toLocaleString()}</p>
          </div>
        </body>
      </html>
    `;

    const printWindow = window.open('', '_blank');
    if (printWindow) {
      printWindow.document.write(printContent);
      printWindow.document.close();
      printWindow.focus();
      printWindow.onload = () => {
        printWindow.print();
      };
    }
  };

  // Show loading while auth is initializing (prevents subscription popup on tab switch)
  if (authLoading || (!user && typeof window !== 'undefined')) {
    return (
      <div className="glass p-6 rounded-luxury-lg border border-gold/20">
        <div className="flex items-center justify-center py-8">
          <div className="w-8 h-8 border-2 border-gold border-t-transparent rounded-full animate-spin mr-3"></div>
          <span className="text-silver">Loading market intelligence...</span>
        </div>
      </div>
    );
  }

  // Show upgrade prompt if user doesn't have access
  if (!hasAccess) {
    return (
      <SubscriptionUpgrade
        currentPlan={userPlan}
        requiredFeature="marketIntelligence"
        featureName="Market Intelligence Dashboard"
        featureDescription="Access comprehensive market analysis including conditions, valuations, competitive landscape, timing insights, opportunities and risks."
      />
    );
  }

  return (
    <div className="glass p-6 rounded-luxury-lg border border-gold/20">
      <div className="flex items-center justify-between mb-6">
        <h3 className="text-xl font-semibold text-warm-white font-serif">
          Market Intelligence Dashboard
        </h3>
      </div>

      {/* Input Form */}
      {!intelligence && (
        <div className="grid md:grid-cols-3 gap-4 mb-6">
          <div>
            <label className="block text-sm font-medium text-silver/80 mb-2">
              Industry *
            </label>
            <input
              type="text"
              value={formData.industry}
              onChange={(e) => setFormData({ ...formData, industry: e.target.value })}
              placeholder="e.g., Technology, Healthcare, Manufacturing"
              className="w-full px-3 py-2 bg-charcoal/50 border border-gold/20 rounded-luxury text-warm-white placeholder-silver/60 focus:outline-none focus:border-gold focus:ring-1 focus:ring-gold"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-silver/80 mb-2">
              Geography
            </label>
            <input
              type="text"
              value={formData.geography}
              onChange={(e) => setFormData({ ...formData, geography: e.target.value })}
              placeholder="e.g., United States, California, Global"
              className="w-full px-3 py-2 bg-charcoal/50 border border-gold/20 rounded-luxury text-warm-white placeholder-silver/60 focus:outline-none focus:border-gold focus:ring-1 focus:ring-gold"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-silver/80 mb-2">
              Deal Size
            </label>
            <input
              type="number"
              value={formData.dealSize || ''}
              onChange={(e) => setFormData({ ...formData, dealSize: Number(e.target.value) || 0 })}
              placeholder="100000"
              className="w-full px-3 py-2 bg-charcoal/50 border border-gold/20 rounded-luxury text-warm-white placeholder-silver/60 focus:outline-none focus:border-gold focus:ring-1 focus:ring-gold"
            />
          </div>
        </div>
      )}

      {/* Generate Button */}
      <div className="text-center mb-6">
        <button
          onClick={handleGenerateIntelligence}
          disabled={isLoading || !formData.industry.trim()}
          className="px-6 py-3 bg-accent-gradient text-midnight font-medium rounded-luxury border-2 border-gold/30 hover:border-gold hover:transform hover:scale-105 hover:shadow-gold-glow transition-all duration-300 font-primary tracking-luxury text-sm disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {isLoading ? (
            <div className="flex items-center space-x-2">
              <div className="w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin"></div>
              <span>Generating Intelligence...</span>
            </div>
          ) : (
            intelligence ? 'Regenerate Report' : 'Generate Market Intelligence'
          )}
        </button>
      </div>

      {error && (
        <div className="mb-6 p-4 bg-red-900/20 border border-red-400/30 rounded-luxury text-red-400">
          <p className="text-sm">{error}</p>
        </div>
      )}

      {intelligence && (
        <div className="space-y-6">
          {/* Parameters Summary */}
          <div className="p-4 bg-charcoal/30 rounded-luxury border border-gold/10">
            <h4 className="text-lg font-semibold text-gold mb-2 font-serif">Analysis Parameters</h4>
            <div className="grid md:grid-cols-3 gap-4 text-sm">
              <div>
                <span className="text-silver/60">Industry:</span>
                <span className="ml-2 text-warm-white font-medium">{formData.industry}</span>
              </div>
              {formData.geography && (
                <div>
                  <span className="text-silver/60">Geography:</span>
                  <span className="ml-2 text-warm-white font-medium">{formData.geography}</span>
                </div>
              )}
              {formData.dealSize > 0 && (
                <div>
                  <span className="text-silver/60">Deal Size:</span>
                  <span className="ml-2 text-warm-white font-medium">{formatCurrency(formData.dealSize)}</span>
                </div>
              )}
            </div>
          </div>

          {/* Market Conditions */}
          <div className="p-4 bg-blue-900/10 rounded-luxury border border-blue-400/20">
            <h4 className="text-lg font-semibold text-blue-400 mb-3 font-serif flex items-center">
              <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
              </svg>
              Current Market Conditions
            </h4>
            <p className="text-silver/90 leading-relaxed text-sm">{intelligence.marketOverview?.size?.insight || 'Market overview unavailable'}</p>
          </div>

          {/* Key Insights Grid */}
          <div className="grid md:grid-cols-2 gap-4">
            {/* Valuation Trends */}
            <div className="p-4 bg-green-900/10 rounded-luxury border border-green-400/20">
              <h4 className="text-lg font-semibold text-green-400 mb-3 font-serif flex items-center">
                <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1" />
                </svg>
                Valuation Trends
              </h4>
              <p className="text-silver/90 leading-relaxed text-sm">{intelligence.marketOverview?.growth?.insight || 'Valuation trends unavailable'}</p>
            </div>

            {/* Competitive Analysis */}
            <div className="p-4 bg-purple-900/10 rounded-luxury border border-purple-400/20">
              <h4 className="text-lg font-semibold text-purple-400 mb-3 font-serif flex items-center">
                <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                </svg>
                Competitive Landscape
              </h4>
              <p className="text-silver/90 leading-relaxed text-sm">{intelligence.competitive?.intensity?.insight || 'Competitive analysis unavailable'}</p>
            </div>
          </div>

          {/* Market Timing */}
          <div className="p-4 bg-indigo-900/10 rounded-luxury border border-indigo-400/20">
            <h4 className="text-lg font-semibold text-indigo-400 mb-3 font-serif flex items-center">
              <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              Market Timing Insights
            </h4>
            <div className="space-y-3">
              {intelligence.economic?.timing?.insight ? (
                <p className="text-silver/90 leading-relaxed text-sm">{intelligence.economic.timing.insight}</p>
              ) : (
                <p className="text-silver/90 leading-relaxed text-sm">Market timing analysis unavailable</p>
              )}
              {intelligence.timing && typeof intelligence.timing === 'string' && (
                <div className="flex items-center space-x-2 mt-2">
                  <span className="text-indigo-300 text-xs font-medium">Overall Timing Rating:</span>
                  <span className={`px-2 py-1 rounded text-xs font-medium ${
                    intelligence.timing === 'excellent' ? 'bg-green-500/20 text-green-400' :
                    intelligence.timing === 'good' ? 'bg-blue-500/20 text-blue-400' :
                    intelligence.timing === 'moderate' ? 'bg-yellow-500/20 text-yellow-400' :
                    'bg-red-500/20 text-red-400'
                  }`}>
                    {intelligence.timing.charAt(0).toUpperCase() + intelligence.timing.slice(1)}
                  </span>
                </div>
              )}
            </div>
          </div>

          {/* Opportunities & Risks */}
          <div className="grid md:grid-cols-2 gap-4">
            {/* Opportunities */}
            <div className="p-4 bg-green-900/10 rounded-luxury border border-green-400/20">
              <h4 className="text-lg font-semibold text-green-400 mb-3 font-serif flex items-center">
                <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                </svg>
                Market Opportunities
              </h4>
              <ul className="space-y-2">
                {(intelligence.competitive?.opportunities || []).map((opportunity, index) => (
                  <li key={index} className="text-silver/90 text-sm flex items-start">
                    <span className="text-green-400 mr-2">•</span>
                    {typeof opportunity === 'string' ? opportunity : opportunity?.insight || 'Opportunity unavailable'}
                  </li>
                ))}
              </ul>
            </div>

            {/* Risks */}
            <div className="p-4 bg-red-900/10 rounded-luxury border border-red-400/20">
              <h4 className="text-lg font-semibold text-red-400 mb-3 font-serif flex items-center">
                <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                </svg>
                Market Risks
              </h4>
              <ul className="space-y-2">
                {(intelligence.economic?.risks || []).map((risk, index) => (
                  <li key={index} className="text-silver/90 text-sm flex items-start">
                    <span className="text-red-400 mr-2">•</span>
                    {typeof risk === 'string' ? risk : risk?.factor || 'Risk unavailable'}
                  </li>
                ))}
              </ul>
            </div>
          </div>

          {/* Conversational AI Chatbox */}
          <ConversationalChatbox
            listingId={listingId || 'market-intelligence-general'}
            analysisType="market_intelligence"
            previousAnalysis={{ ...intelligence, parameters: formData }}
            title="Ask About Market Intelligence"
            placeholder="Ask about market trends, competition, growth opportunities, valuations..."
            icon={
              <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
              </svg>
            }
          />

          {/* Export Options */}
          <div className="flex flex-col sm:flex-row gap-3 justify-center pt-4 border-t border-gold/10">
            <button
              onClick={copyToClipboard}
              className="px-4 py-2 bg-neutral-800/40 border border-gold/20 text-silver rounded-luxury hover:bg-neutral-700/50 transition-all flex items-center gap-2 justify-center"
              title="Copy Report"
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
              </svg>
              {copySuccess === 'report' ? 'Copied!' : 'Copy'}
            </button>

            <button
              onClick={exportToExcel}
              className="px-6 py-2 bg-accent-gradient text-midnight font-medium rounded-luxury border-2 border-gold/30 hover:border-gold hover:transform hover:scale-105 hover:shadow-gold-glow transition-all duration-300 font-primary text-sm flex items-center gap-2 justify-center"
              title="Export to Excel"
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
              </svg>
              Export to Excel
            </button>

            <button
              onClick={printReport}
              className="px-4 py-2 bg-neutral-800/40 border border-gold/20 text-silver rounded-luxury hover:bg-neutral-700/50 transition-all flex items-center gap-2 justify-center"
              title="Print Report"
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z" />
              </svg>
              Print
            </button>
          </div>

          {/* AI Disclaimer */}
          <div className="mt-6 p-4 bg-navy/20 rounded-luxury border border-gold/10">
            <p className="text-silver/70 text-xs leading-relaxed">
              <strong className="text-gold">AI Disclaimer:</strong> Succedence uses AI-powered tools to provide insights and recommendations. These tools are designed to assist your decision-making, but they do not constitute financial, legal, or investment advice. Users should conduct independent due diligence before making any acquisition or investment decisions.
            </p>
          </div>
        </div>
      )}
    </div>
  );
}
