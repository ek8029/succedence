'use client';

import React, { useState } from 'react';
import { BusinessAnalysis } from '@/lib/ai/openai';
import { hasAIFeatureAccess } from '@/lib/subscription';
import { PlanType } from '@/lib/types';
import { useAuth } from '@/contexts/AuthContext';
import SubscriptionUpgrade from '@/components/SubscriptionUpgrade';

interface BusinessAnalysisAIProps {
  listingId: string;
  listingTitle: string;
}

// Helper component for truncated text
function TruncatedText({ text, maxWords }: { text: string; maxWords: number }) {
  const [isExpanded, setIsExpanded] = useState(false);

  const words = text.split(' ');
  const shouldTruncate = words.length > maxWords;
  const displayText = shouldTruncate && !isExpanded
    ? words.slice(0, maxWords).join(' ') + '...'
    : text;

  return (
    <div>
      <p className="text-silver/90 text-sm leading-relaxed">{displayText}</p>
      {shouldTruncate && (
        <button
          onClick={() => setIsExpanded(!isExpanded)}
          className="mt-2 text-gold hover:text-warm-white text-sm font-medium transition-colors"
        >
          {isExpanded ? 'Show Less' : 'Show More'}
        </button>
      )}
    </div>
  );
}

export default function EnhancedBusinessAnalysisAI({ listingId, listingTitle }: BusinessAnalysisAIProps) {
  const { user } = useAuth();
  const [analysis, setAnalysis] = useState<BusinessAnalysis | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isCachedResult, setIsCachedResult] = useState(false);
  const [analysisDate, setAnalysisDate] = useState<string | null>(null);

  // Check if user has access to business analysis feature
  const userPlan = (user?.plan as PlanType) || 'free';
  const hasAccess = hasAIFeatureAccess(userPlan, 'businessAnalysis', user?.role);

  const handleAnalyzeClick = async () => {
    setIsLoading(true);
    setError(null);

    try {
      const response = await fetch('/api/ai/analyze-business', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ listingId }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || 'Failed to analyze business');
      }

      setAnalysis(data.analysis);
      setIsCachedResult(data.cached || false);
      setAnalysisDate(data.analysisDate || new Date().toISOString());
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to analyze business');
    } finally {
      setIsLoading(false);
    }
  };

  const copyToClipboard = async (section: string, text: string) => {
    try {
      await navigator.clipboard.writeText(`${section}:\n\n${text}`);
      // You could add a toast notification here
      console.log('Copied to clipboard:', section);
    } catch (err) {
      console.error('Failed to copy to clipboard:', err);
    }
  };

  const saveAsDocument = (analysis: BusinessAnalysis, title: string) => {
    const content = generatePDFContent(analysis, title);

    // Create and download as text file (PDF generation would require additional libraries)
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${title.replace(/[^a-zA-Z0-9]/g, '_')}_AI_Analysis.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const generatePDFContent = (analysis: BusinessAnalysis, title: string) => {
    return `
AI BUSINESS ANALYSIS REPORT
${title}
Generated on: ${new Date().toLocaleDateString()}

OVERALL SCORE: ${analysis.overallScore}/100
RECOMMENDATION: ${analysis.recommendation.replace('_', ' ').toUpperCase()}

EXECUTIVE SUMMARY
${analysis.summary}

STRENGTHS
${analysis.strengths.map((item, i) => `${i + 1}. ${item}`).join('\n')}

AREAS OF CONCERN
${analysis.weaknesses.map((item, i) => `${i + 1}. ${item}`).join('\n')}

RISK FACTORS
${analysis.risks.map((item, i) => `${i + 1}. ${item}`).join('\n')}

GROWTH OPPORTUNITIES
${analysis.opportunities.map((item, i) => `${i + 1}. ${item}`).join('\n')}

VALUATION INSIGHTS
${analysis.valuationInsights}

MARKET POSITION
${analysis.marketPosition}

---
This analysis was generated by AI and should not replace professional due diligence.
`;
  };

  const getRecommendationColor = (recommendation: string) => {
    switch (recommendation) {
      case 'strong_buy':
        return 'text-green-400 bg-green-900/20 border-green-400/30';
      case 'buy':
        return 'text-green-300 bg-green-900/10 border-green-400/20';
      case 'hold':
        return 'text-yellow-400 bg-yellow-900/20 border-yellow-400/30';
      case 'avoid':
        return 'text-red-400 bg-red-900/20 border-red-400/30';
      default:
        return 'text-gray-400 bg-gray-900/20 border-gray-400/30';
    }
  };

  const formatRecommendation = (recommendation: string) => {
    return recommendation.replace('_', ' ').toUpperCase();
  };

  // Show upgrade prompt if user doesn't have access
  if (!hasAccess) {
    return (
      <SubscriptionUpgrade
        currentPlan={userPlan}
        requiredFeature="businessAnalysis"
        featureName="AI Business Analysis"
        featureDescription="Get comprehensive AI-powered analysis of business opportunities including scoring, strengths, weaknesses, risks, and growth opportunities."
      />
    );
  }

  return (
    <div className="glass p-6 rounded-luxury-lg border border-gold/20">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-xl font-semibold text-warm-white font-serif">
          AI Business Analysis
        </h3>
        <div className="flex items-center gap-3">
          {analysis && isCachedResult && (
            <div className="text-xs text-gold/80 bg-gold/10 px-2 py-1 rounded border border-gold/20">
              ðŸ“‹ Cached ({new Date(analysisDate!).toLocaleDateString()})
            </div>
          )}
          {!analysis && (
            <button
              onClick={handleAnalyzeClick}
              disabled={isLoading}
              className="px-4 py-2 bg-accent-gradient text-midnight font-medium rounded-luxury border-2 border-gold/30 hover:border-gold hover:transform hover:scale-105 hover:shadow-gold-glow transition-all duration-300 font-primary tracking-luxury text-sm disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isLoading ? (
                <div className="flex items-center space-x-2">
                  <div className="w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin"></div>
                  <span>Analyzing...</span>
                </div>
              ) : (
                'Analyze Business'
              )}
            </button>
          )}
        </div>
      </div>

      {error && (
        <div className="mb-4 p-4 bg-red-900/20 border border-red-400/30 rounded-luxury text-red-400">
          <p className="text-sm">{error}</p>
        </div>
      )}

      {analysis && (
        <div className="space-y-6">
          {/* Overall Score & Recommendation */}
          <div className="flex items-center justify-between p-4 bg-charcoal/50 rounded-luxury border border-gold/10">
            <div>
              <div className="text-3xl font-bold text-gold font-mono mb-1">
                {analysis.overallScore}/100
              </div>
              <div className="text-sm text-silver/80">Overall Score</div>
            </div>
            <div className={`px-4 py-2 rounded-luxury border-2 font-semibold text-sm ${getRecommendationColor(analysis.recommendation)}`}>
              {formatRecommendation(analysis.recommendation)}
            </div>
          </div>

          {/* Executive Summary */}
          <div className="p-4 bg-navy/30 rounded-luxury border border-gold/10">
            <div className="flex items-center justify-between mb-2">
              <h4 className="text-lg font-semibold text-warm-white font-serif">Executive Summary</h4>
              <button
                onClick={() => copyToClipboard('Executive Summary', analysis.summary)}
                className="p-2 text-gold hover:text-warm-white hover:bg-gold/10 rounded transition-colors"
                title="Copy to clipboard"
              >
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
                </svg>
              </button>
            </div>
            <TruncatedText text={analysis.summary} maxWords={50} />
          </div>

          {/* Analysis Grid */}
          <div className="grid md:grid-cols-2 gap-4">
            {/* Strengths */}
            <div className="p-4 bg-green-900/10 rounded-luxury border border-green-400/20">
              <h4 className="text-lg font-semibold text-green-400 mb-3 font-serif flex items-center">
                <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                Strengths
              </h4>
              <ul className="space-y-2">
                {analysis.strengths.map((strength, index) => (
                  <li key={index} className="text-silver/90 text-sm flex items-start">
                    <span className="text-green-400 mr-2">â€¢</span>
                    {strength}
                  </li>
                ))}
              </ul>
            </div>

            {/* Weaknesses */}
            <div className="p-4 bg-yellow-900/10 rounded-luxury border border-yellow-400/20">
              <h4 className="text-lg font-semibold text-yellow-400 mb-3 font-serif flex items-center">
                <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                </svg>
                Areas of Concern
              </h4>
              <ul className="space-y-2">
                {analysis.weaknesses.map((weakness, index) => (
                  <li key={index} className="text-silver/90 text-sm flex items-start">
                    <span className="text-yellow-400 mr-2">â€¢</span>
                    {weakness}
                  </li>
                ))}
              </ul>
            </div>

            {/* Risks */}
            <div className="p-4 bg-red-900/10 rounded-luxury border border-red-400/20">
              <h4 className="text-lg font-semibold text-red-400 mb-3 font-serif flex items-center">
                <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                Risk Factors
              </h4>
              <ul className="space-y-2">
                {analysis.risks.map((risk, index) => (
                  <li key={index} className="text-silver/90 text-sm flex items-start">
                    <span className="text-red-400 mr-2">â€¢</span>
                    {risk}
                  </li>
                ))}
              </ul>
            </div>

            {/* Opportunities */}
            <div className="p-4 bg-blue-900/10 rounded-luxury border border-blue-400/20">
              <h4 className="text-lg font-semibold text-blue-400 mb-3 font-serif flex items-center">
                <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                </svg>
                Growth Opportunities
              </h4>
              <ul className="space-y-2">
                {analysis.opportunities.map((opportunity, index) => (
                  <li key={index} className="text-silver/90 text-sm flex items-start">
                    <span className="text-blue-400 mr-2">â€¢</span>
                    {opportunity}
                  </li>
                ))}
              </ul>
            </div>
          </div>

          {/* Detailed Analysis */}
          <div className="grid md:grid-cols-2 gap-4">
            {/* Valuation Insights */}
            <div className="p-4 bg-charcoal/30 rounded-luxury border border-gold/10">
              <div className="flex items-center justify-between mb-3">
                <h4 className="text-lg font-semibold text-gold font-serif">Valuation Insights</h4>
                <button
                  onClick={() => copyToClipboard('Valuation Insights', analysis.valuationInsights)}
                  className="p-1 text-gold hover:text-warm-white hover:bg-gold/10 rounded transition-colors"
                  title="Copy to clipboard"
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
                  </svg>
                </button>
              </div>
              <TruncatedText text={analysis.valuationInsights} maxWords={50} />
            </div>

            {/* Market Position */}
            <div className="p-4 bg-charcoal/30 rounded-luxury border border-gold/10">
              <div className="flex items-center justify-between mb-3">
                <h4 className="text-lg font-semibold text-gold font-serif">Market Position</h4>
                <button
                  onClick={() => copyToClipboard('Market Position', analysis.marketPosition)}
                  className="p-1 text-gold hover:text-warm-white hover:bg-gold/10 rounded transition-colors"
                  title="Copy to clipboard"
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
                  </svg>
                </button>
              </div>
              <TruncatedText text={analysis.marketPosition} maxWords={50} />
            </div>
          </div>

          {/* Action Buttons */}
          <div className="flex flex-col sm:flex-row justify-center gap-3 pt-4 border-t border-gold/10">
            <button
              onClick={handleAnalyzeClick}
              disabled={isLoading}
              className="px-6 py-2 bg-transparent border-2 border-gold/30 text-gold hover:bg-gold/10 hover:border-gold font-medium rounded-luxury transition-all duration-300 hover:transform hover:scale-105 font-primary text-sm disabled:opacity-50"
            >
              {isLoading ? 'Analyzing...' : 'Regenerate Analysis'}
            </button>
            <button
              onClick={() => saveAsDocument(analysis, listingTitle)}
              className="px-6 py-2 bg-accent-gradient text-midnight font-medium rounded-luxury hover:transform hover:scale-105 transition-all duration-300 font-primary text-sm"
            >
              Save as Document
            </button>
          </div>
        </div>
      )}
    </div>
  );
}